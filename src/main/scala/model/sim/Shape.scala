package model.sim

import model.sim.Shape.Metadata
import model.{Position, Positioned}

import scala.collection.mutable

sealed trait Shape

object Shape {
  type Metadata = mutable.Map[String, String]
}

// Assume all parameters are the default generated by JSimGraph, we'll add parameters next week
sealed trait Node extends Shape with Positioned {
  var position: Position
  var name: String
  var metadata: Metadata
}

case class Source(var metadata: Metadata, var name: String, var position: Position) extends Node

case class Queue(var metadata: Metadata, var name: String, var position: Position) extends Node

case class Sink(var metadata: Metadata, var name: String, var position: Position) extends Node

case class Fork(var metadata: Metadata, var name: String, var position: Position) extends Node

case class Join(var metadata: Metadata, var name: String, var position: Position) extends Node

case class Connection(source: Node, target: Node) extends Shape
